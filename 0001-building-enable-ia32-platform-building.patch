From 6172af6d5bfbba87a12a85c4cf7a8b7c148d751c Mon Sep 17 00:00:00 2001
From: fiking <fiking@users.noreply.github.com>
Date: Sun, 15 Aug 2021 01:06:16 -0700
Subject: [PATCH] [building] enable ia32 platform building

---
 SConstruct        |  2 +-
 src/SConscript    | 12 ++++++------
 src/api.cc        |  2 +-
 src/objects-inl.h |  4 ++--
 4 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/SConstruct b/SConstruct
index b31e65ff4b..d0699933dc 100644
--- a/SConstruct
+++ b/SConstruct
@@ -82,7 +82,7 @@ def GetOptions():
   result.Add('mode', 'debug or release', 'release')
   result.Add('toolchain', 'the toolchain to use (gcc, gcc-darwin or msvc)', toolchain_guess)
   result.Add('os', 'the os to build for (linux, macos or win32)', os_guess)
-  result.Add('processor', 'the processor to build for (arm or ia32)', processor_guess)
+  result.Add('processor', 'the processor to build for (arm or ia32)', 'ia32')
   result.Add('snapshot', 'build using snapshots for faster start-up (on, off)', 'off')
   result.Add('library', 'which type of library to produce (static, shared, default)', 'default')
   return result
diff --git a/src/SConscript b/src/SConscript
index a30faeb31f..942895a873 100644
--- a/src/SConscript
+++ b/src/SConscript
@@ -40,7 +40,7 @@ BUILD_OPTIONS_MAP = {
         'CCFLAGS': '$DIALECTFLAGS $WARNINGFLAGS -g -O0',
         'CPPDEFINES': ['ENABLE_LOGGING_AND_PROFILING', 'ENABLE_DISASSEMBLER', 'DEBUG'],
         'CXXFLAGS': '$CCFLAGS -fno-rtti -fno-exceptions',
-        'DIALECTFLAGS': '-ansi',
+        'DIALECTFLAGS': '-ansi -m32',
         'LIBS': 'pthread',
         'WARNINGFLAGS': '-pedantic -Wall -W -Wno-unused-parameter -Werror'
       },
@@ -48,7 +48,7 @@ BUILD_OPTIONS_MAP = {
         'CCFLAGS': '$DIALECTFLAGS $WARNINGFLAGS -g -O0',
         'CPPDEFINES': ['ENABLE_LOGGING_AND_PROFILING', 'ENABLE_DISASSEMBLER', 'DEBUG'],
         'CXXFLAGS': '$CCFLAGS -fno-rtti -fno-exceptions',
-        'DIALECTFLAGS': '-ansi',
+        'DIALECTFLAGS': '-ansi -m32',
         'LIBS': 'pthread',
         'WARNINGFLAGS': '-Werror'
       },
@@ -56,7 +56,7 @@ BUILD_OPTIONS_MAP = {
         'CCFLAGS': '$DIALECTFLAGS $WARNINGFLAGS -g -O0',
         'CPPDEFINES': ['ENABLE_LOGGING_AND_PROFILING', 'ENABLE_DISASSEMBLER', 'DEBUG', 'SUPPORT_UTF8', 'NO_RECURSE', 'SUPPORT_UCP'],
         'CXXFLAGS': '$CCFLAGS -fno-rtti -fno-exceptions',
-        'DIALECTFLAGS': '-ansi',
+        'DIALECTFLAGS': '-ansi -m32',
         'LIBS': 'pthread',
         'WARNINGFLAGS': '-w'
       }
@@ -66,7 +66,7 @@ BUILD_OPTIONS_MAP = {
         'CCFLAGS': '$DIALECTFLAGS $WARNINGFLAGS -O2',
         'CPPDEFINES': ['ENABLE_LOGGING_AND_PROFILING'],
         'CXXFLAGS': '$CCFLAGS -fno-rtti -fno-exceptions',
-        'DIALECTFLAGS': '-ansi',
+        'DIALECTFLAGS': '-ansi -m32 -Wno-error=unused-but-set-variable -Wno-error=implicit-fallthrough -Wno-error=nonnull-compare -Wno-error=strict-aliasing -Wno-error=format-security -Wno-error=narrowing -Wno-error=unused-result',
         'LIBS': 'pthread',
         'WARNINGFLAGS': '-pedantic -Wall -W -Wno-unused-parameter -Werror'
       },
@@ -74,7 +74,7 @@ BUILD_OPTIONS_MAP = {
         'CCFLAGS': '$DIALECTFLAGS $WARNINGFLAGS -O2',
         'CPPDEFINES': ['ENABLE_LOGGING_AND_PROFILING'],
         'CXXFLAGS': '$CCFLAGS -fno-rtti -fno-exceptions',
-        'DIALECTFLAGS': '-ansi',
+        'DIALECTFLAGS': '-ansi -m32',
         'LIBS': 'pthread',
         'WARNINGFLAGS': '-Werror'
       },
@@ -82,7 +82,7 @@ BUILD_OPTIONS_MAP = {
         'CCFLAGS': '$DIALECTFLAGS $WARNINGFLAGS -O2',
         'CPPDEFINES': ['ENABLE_LOGGING_AND_PROFILING', 'SUPPORT_UTF8', 'NO_RECURSE', 'SUPPORT_UCP'],
         'CXXFLAGS': '$CCFLAGS -fno-rtti -fno-exceptions',
-        'DIALECTFLAGS': '-ansi',
+        'DIALECTFLAGS': '-ansi -m32',
         'LIBS': 'pthread',
         'WARNINGFLAGS': '-w'
       }
diff --git a/src/api.cc b/src/api.cc
index f346cc1977..ff9c325fc1 100644
--- a/src/api.cc
+++ b/src/api.cc
@@ -2715,7 +2715,7 @@ char* HandleScopeImplementer::RestoreThread(char* storage) {
 
 
 char* HandleScopeImplementer::RestoreThreadHelper(char* storage) {
-  memcpy(this, storage, sizeof(*this));
+  memcpy((void*)this, (void*)storage, sizeof(*this));
   *ImplementationUtilities::CurrentHandleScope() = handle_scope_data_;
   return storage + ArchiveSpacePerThread();
 }
diff --git a/src/objects-inl.h b/src/objects-inl.h
index 121f59c807..d1561331c4 100644
--- a/src/objects-inl.h
+++ b/src/objects-inl.h
@@ -246,7 +246,7 @@ bool Object::IsJSFunction() {
 }
 
 
-template <> static inline bool Is<JSFunction>(Object* obj) {
+template <> inline bool Is<JSFunction>(Object* obj) {
   return obj->IsJSFunction();
 }
 
@@ -293,7 +293,7 @@ bool Object::IsJSArray() {
 }
 
 
-template <> static inline bool Is<JSArray>(Object* obj) {
+template <> inline bool Is<JSArray>(Object* obj) {
   return obj->IsJSArray();
 }
 
-- 
2.25.1

